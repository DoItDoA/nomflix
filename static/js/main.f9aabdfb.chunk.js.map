{"version":3,"sources":["assets/noPosterSmall.png","Components/GlobalStyles.js","Components/Header.js","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/App.js","index.js"],"names":["GlobalStyles","createGlobalStyle","reset","Header","styled","header","List","ul","Item","li","props","current","SLink","Link","withRouter","pathname","location","to","Container","div","Title","span","Grid","Section","title","children","Loader","role","Text","color","Message","text","Image","bgUrl","Rating","IamgeContainer","Year","Poster","id","imageUrl","rating","year","isMovie","require","default","length","substring","HomePresenter","nowPlaying","upcoming","popular","error","loading","Helmet","map","movie","poster_path","original_title","vote_average","release_date","api","axios","create","baseURL","params","api_key","language","tvApi","get","append_to_response","term","query","encodeURIComponent","moviesApi","HomeContainer","state","a","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","TVContainer","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","e","preventDefault","searchByTerm","target","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","result","backdrop_path","runtime","episode_run_time","genres","genre","index","name","overview","DetailContainer","includes","match","push","history","parsedId","parseInt","isNaN","Router","path","exact","component","Home","TV","Search","Detail","from","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9aabdfb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noPosterSmall.ea2ad102.png\";","import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    ${reset}\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }/* <Link>는 <a>에 해당된다 */\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family: --apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        font-size: 12px;\r\n        background-color: rgba(20,20,20,1);\r\n        color: white;\r\n        padding-top: 50px;\r\n    }\r\n`;\r\nexport default GlobalStyles;\r\n","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.header`\r\n  color: white;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: rgba(20, 20, 20, 0.8);\r\n  z-index: 10;\r\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst List = styled.ul`\r\n  display: flex;\r\n`; // <ul>대신 List로 바뀜, 반드시 대문자로 시작\r\n\r\nconst Item = styled.li`\r\n  width: 80px;\r\n  height: 50px;\r\n  text-align: center;\r\n  border-bottom: 3px solid\r\n    ${(props) => (props.current ? \"#3498db\" : \"tranparent\")}; // 인자로부터 값을 받아 js처럼 사용\r\n  transition: border-bottom 0.2s ease-in-out;\r\n`;\r\n\r\nconst SLink = styled(Link)`\r\n  height: 50px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`; // 특정 함수 Styled 사용시 인자로 사용\r\n\r\nfunction HeaderC({ location: { pathname } }) {\r\n  // props.location.path 가져오기\r\n  return (\r\n    <Header>\r\n      <List>\r\n        {/* styled에 props값 주기 */}\r\n        <Item current={pathname === \"/\"}>\r\n          <SLink to=\"/\">Movies</SLink>\r\n        </Item>\r\n        <Item current={pathname === \"/tv\"}>\r\n          <SLink to=\"/tv\">TV</SLink>\r\n        </Item>\r\n        <Item current={pathname === \"/search\"}>\r\n          <SLink to=\"search\">Search</SLink>\r\n        </Item>\r\n      </List>\r\n    </Header>\r\n  );\r\n}\r\n\r\nexport default withRouter(HeaderC); // Header는 Route를 통해 오지 않았으므로 withRouter해야 HeaderC에 props가 생김\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  :not(:last-child) {\r\n    margin-bottom: 50px;\r\n  } // 마지막 child를 제외한 적용\r\n`;\r\nconst Title = styled.span`\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n`;\r\nconst Grid = styled.div`\r\n  margin-top: 25px;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, 125px);\r\n  gap: 25px;\r\n`;\r\n\r\nconst Section = ({ title, children }) => (\r\n  <Container>\r\n    <Title>{title}</Title>\r\n    <Grid>{children}</Grid>\r\n  </Container>\r\n); // children은 자식 요소로 react에서 자동할당\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.oneOfType([\r\n    PropTypes.arrayOf(PropTypes.node),\r\n    PropTypes.node,\r\n  ]),\r\n};\r\n\r\nexport default Section;\r\n/*\r\nPropTypes 종류\r\n- array: 배열\r\n- arrayOf: 특정 propType으로 이루어진 배열\r\n- bool: true or false 값\r\n- func: 함수\r\n- number: 숫자\r\n- object: 객체\r\n- string: 문자열\r\n- symbol: ES6의 Symbol\r\n- node: 렌더링할 수 있는 모든 것(숫자, 문자열, JSX코드)\r\n- instanceOf: 특정 클래스의 인스턴스(ex: instanceOf(MyClass))\r\n- oneOf(['dog', 'cat']): 주어진 배열 요소 중 값 하나\r\n- oneOfType([React.PropTypes.string, PropTypes.number]): 주어진 배열 안의 종류 중 하나\r\n- objectOf(React.PropTypes.number): 객체의 모든 키 값이 인자로 주어진 PropType인 객체\r\n- shape({ name: PropTypes.string, num: PropTypes.number }): 주어진 스키마를 가진 객체\r\n- any: 아무 종류\r\n*/\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 32px;\r\n  margin-top: 25px;\r\n`;\r\n\r\nconst Loader = () => (\r\n  <Container>\r\n    {/* 시각장애인에 맞춰서 작성 */}\r\n    <span role=\"img\" aria-label=\"Loading\">\r\n      ⏰\r\n    </span>\r\n  </Container>\r\n);\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  width: 100vw;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Text = styled.span`\r\n  color: ${(props) => props.color};\r\n`;\r\n\r\nconst Message = ({ text, color }) => (\r\n  <Container>\r\n    <Text color={color}>{text}</Text>\r\n  </Container>\r\n);\r\n\r\nMessage.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n  color: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  font-size: 12px;\r\n`;\r\n\r\nconst Image = styled.div`\r\n  background-image: url(${(props) => props.bgUrl});\r\n  height: 180px;\r\n  background-size: cover;\r\n  border-radius: 4px;\r\n  background-position: center center;\r\n  transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst Rating = styled.span`\r\n  bottom: 5px;\r\n  right: 5px;\r\n  opacity: 0;\r\n  position: absolute;\r\n  transition: opacity 0.1s linear;\r\n`;\r\n\r\nconst IamgeContainer = styled.div`\r\n  margin-bottom: 5px;\r\n  position: relative;\r\n  &:hover {\r\n    ${Image} {\r\n      opacity: 0.3;\r\n    }\r\n    ${Rating} {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  display: block;\r\n  margin-bottom: 3px;\r\n`;\r\n\r\nconst Year = styled.span`\r\n  font-size: 10px;\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\r\n  <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>\r\n    <Container>\r\n      <IamgeContainer>\r\n        <Image\r\n          bgUrl={\r\n            imageUrl\r\n              ? `https://image.tmdb.org/t/p/w300${imageUrl}`\r\n              : require(\"../assets/noPosterSmall.png\").default\r\n          }\r\n        />\r\n        <Rating>\r\n          <span role=\"img\" aria-label=\"rating\">\r\n            ⭐\r\n          </span>{\" \"}\r\n          {rating}/10\r\n        </Rating>\r\n      </IamgeContainer>\r\n      <Title>\r\n        {title.length > 18 ? `${title.substring(0, 18)}...` : title}\r\n      </Title>\r\n      <Year>{year}</Year>\r\n    </Container>\r\n  </Link>\r\n);\r\n\r\nPoster.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  imageUrl: PropTypes.string,\r\n  title: PropTypes.string.isRequired,\r\n  rating: PropTypes.number,\r\n  year: PropTypes.string,\r\n  isMovie: PropTypes.bool,\r\n};\r\nexport default Poster;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\n/* 통신 시간이 걸리므로 Loader를 작성해야한다 */\r\nconst HomePresenter = ({ nowPlaying, upcoming, popular, error, loading }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>Movies | Nomflix</title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        {nowPlaying && nowPlaying.length > 0 && (\r\n          <Section title=\"Now Playing\">\r\n            {nowPlaying.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date?.substring(0, 4)}\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {upcoming && upcoming.length > 0 && (\r\n          <Section title=\"Upcoming Movies\">\r\n            {upcoming.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date?.substring(0, 4)}\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Movies\">\r\n            {popular.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date?.substring(0, 4)}\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n      </Container>\r\n    )}\r\n  </>\r\n);\r\n\r\nHomePresenter.propTypes = {\r\n  nowPlaying: PropTypes.array,\r\n  upcoming: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  error: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default HomePresenter;\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3/\", // 기본 주소\r\n  params: {\r\n    api_key: \"063c7b0b0ab59e4bdb073ee8b3322ecc\",\r\n    language: \"en-US\",\r\n  }, // 데이터를 불러오기 위해 조건에 맞춰 설정\r\n});\r\n\r\n// axios.create의 url에 주소 덧붙임\r\n// https://developers.themoviedb.org/3에 맞춰서 작성\r\nexport const tvApi = {\r\n  topRated: () => api.get(\"tv/top_rated\"), // '/'시작하면 절대경로여서 반드시 상대경로로 적어야 함\r\n  popular: () => api.get(\"tv/popular\"),\r\n  airingToday: () => api.get(\"tv/airing_today\"),\r\n  showDetail: (id) =>\r\n    api.get(`tv/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }), // Detail 작업시 따로 조건 붙여 데이터 호출\r\n  search: (term) =>\r\n    api.get(\"search/tv\", {\r\n      params: {\r\n        query: encodeURIComponent(term), // space나 &등 같은 특정 문자들은 URI가 읽을수 있게 변환\r\n      },\r\n    }),\r\n};\r\n\r\nexport const moviesApi = {\r\n  nowPlaying: () => api.get(\"movie/now_playing\"),\r\n  upcoming: () => api.get(\"movie/upcoming\"),\r\n  popular: () => api.get(\"movie/popular\"),\r\n  movieDetail: (id) =>\r\n    api.get(`movie/${id}`, {\r\n      params: {\r\n        append_to_response: \"videos\",\r\n      },\r\n    }),\r\n  search: (term) =>\r\n    api.get(\"search/movie\", {\r\n      params: {\r\n        query: encodeURIComponent(term), // space나 &등 같은 특정 문자들은 URI가 읽을수 있게 변환\r\n      },\r\n    }),\r\n};\r\n","import HomeContainer from \"./HomeContainer\";\r\n\r\nexport default HomeContainer;\r\n","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"api\";\r\n\r\nclass HomeContainer extends React.Component {\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: nowPlaying },\r\n      } = await moviesApi.nowPlaying();\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await moviesApi.upcoming();\r\n      const {\r\n        data: { results: popular },\r\n      } = await moviesApi.popular();\r\n      this.setState({ nowPlaying, upcoming, popular });\r\n    } catch {\r\n      this.setState({ error: \"Can't find Movie information.\" });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default HomeContainer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport styled from \"styled-components\";\r\nimport Section from \"Components/Section\";\r\nimport Loader from \"Components/Loader\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst TVPresenter = ({ topRated, airingToday, popular, error, loading }) => (\r\n  <>\r\n    <Helmet>\r\n      <title>TV Shows | Nomflix</title>\r\n    </Helmet>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <Container>\r\n        {topRated && topRated.length > 0 && (\r\n          <Section title=\"Top Rated Shows\">\r\n            {topRated.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                imageUrl={show.poster_path}\r\n                title={show.original_name}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date?.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {popular && popular.length > 0 && (\r\n          <Section title=\"Popular Shows\">\r\n            {popular.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                imageUrl={show.poster_path}\r\n                title={show.original_name}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date?.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {airingToday && airingToday.length > 0 && (\r\n          <Section title=\"Airing Today\">\r\n            {airingToday.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                imageUrl={show.poster_path}\r\n                title={show.original_name}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date?.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n      </Container>\r\n    )}\r\n  </>\r\n);\r\n\r\nTVPresenter.propTypes = {\r\n  topRated: PropTypes.array,\r\n  airingToday: PropTypes.array,\r\n  popular: PropTypes.array,\r\n  error: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default TVPresenter;\r\n","import TVContainer from \"./TVContainer\";\r\n\r\nexport default TVContainer;\r\n","import React from \"react\";\r\nimport TVPresenter from \"./TVPresenter\";\r\nimport { tvApi } from \"api\";\r\n\r\nclass TVContainer extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    airingToday: null,\r\n    popular: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n      this.setState({ topRated, airingToday, popular });\r\n    } catch {\r\n      this.setState({ error: \"Can't find TV information.\" });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { topRated, airingToday, popular, error, loading } = this.state;\r\n    return (\r\n      <TVPresenter\r\n        topRated={topRated}\r\n        airingToday={airingToday}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default TVContainer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\nimport Section from \"Components/Section\";\r\nimport Message from \"Components/Message\";\r\nimport Poster from \"Components/Poster\";\r\n\r\nconst Container = styled.div`\r\n  padding: 20px;\r\n`;\r\nconst Form = styled.form`\r\n  margin-bottom: 50px;\r\n  width: 100%;\r\n`;\r\nconst Input = styled.input`\r\n  all: unset;\r\n  font-size: 28px;\r\n  width: 100%;\r\n`;\r\nconst SearchPresenter = ({\r\n  movieResults,\r\n  tvResults,\r\n  error,\r\n  loading,\r\n  searchTerm,\r\n  handleSubmit,\r\n  updateTerm,\r\n}) => (\r\n  <Container>\r\n    <Helmet>\r\n      <title>Search | Nomflix</title>\r\n    </Helmet>\r\n    <Form onSubmit={handleSubmit}>\r\n      <Input\r\n        placeholder=\"Search Movies or TV shows\"\r\n        value={searchTerm}\r\n        onChange={updateTerm}\r\n      />\r\n    </Form>\r\n    {loading ? (\r\n      <Loader />\r\n    ) : (\r\n      <>\r\n        {movieResults && movieResults.length > 0 && (\r\n          <Section title=\"Movie Results\">\r\n            {movieResults.map((movie) => (\r\n              <Poster\r\n                key={movie.id}\r\n                id={movie.id}\r\n                imageUrl={movie.poster_path}\r\n                title={movie.original_title}\r\n                rating={movie.vote_average}\r\n                year={movie.release_date?.substring(0, 4)}\r\n                isMovie={true}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {tvResults && tvResults.length > 0 && (\r\n          <Section title=\"TV show Results\">\r\n            {tvResults.map((show) => (\r\n              <Poster\r\n                key={show.id}\r\n                id={show.id}\r\n                imageUrl={show.poster_path}\r\n                title={show.original_name}\r\n                rating={show.vote_average}\r\n                year={show.first_air_date?.substring(0, 4)}\r\n              />\r\n            ))}\r\n          </Section>\r\n        )}\r\n        {error && <Message color=\"#e74c3c\" text={error} />}\r\n        {tvResults &&\r\n          movieResults &&\r\n          tvResults.length === 0 &&\r\n          movieResults.length === 0 && (\r\n            <Message text=\"Nothing Found\" color=\"#95a5a6\" />\r\n          )}\r\n      </>\r\n    )}\r\n  </Container>\r\n);\r\n\r\nSearchPresenter.propTypes = {\r\n  movieResults: PropTypes.array,\r\n  tvResults: PropTypes.array,\r\n  error: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n  searchTerm: PropTypes.string,\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  updateTerm: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SearchPresenter;\r\n","import SearchContainer from \"./SearchContainer\";\r\n\r\nexport default SearchContainer;\r\n","import { moviesApi, tvApi } from \"api\";\r\nimport React from \"react\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n\r\nclass SearchContainer extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    error: null,\r\n    loading: false,\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { searchTerm } = this.state;\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n  };\r\n\r\n  updateTerm = (e) => {\r\n    const {\r\n      target: { value },\r\n    } = e;\r\n    this.setState({ searchTerm: value });\r\n  };\r\n\r\n  searchByTerm = async () => {\r\n    const { searchTerm } = this.state;\r\n    try {\r\n      this.setState({\r\n        loading: true,\r\n      });\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await moviesApi.search(searchTerm);\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n\r\n      this.setState({ movieResults, tvResults });\r\n    } catch {\r\n      this.setState({ error: \"Can't find results.\" });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, error, loading } = this.state;\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        error={error}\r\n        loading={loading}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchContainer;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from \"react-helmet\";\r\nimport Loader from \"Components/Loader\";\r\n\r\nconst Container = styled.div`\r\n  height: calc(100vh - 100px); // 계산할시 calc를 써야한다\r\n  width: 100%;\r\n  position: relative;\r\n  padding: 50px;\r\n`;\r\n\r\nconst Backdrop = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  filter: blur(3px); // 흐리게 만듬. 수치가 높을수록 더 흐려짐\r\n  opacity: 0.5;\r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  position: relative;\r\n  height: 100%;\r\n`;\r\n\r\nconst Cover = styled.div`\r\n  width: 30%;\r\n  background-image: url(${(props) => props.bgImage});\r\n  background-position: center center;\r\n  background-size: cover;\r\n  height: 100%;\r\n  border-radius: 5px;\r\n`;\r\n\r\nconst Data = styled.div`\r\n  width: 70%;\r\n  margin-left: 10px;\r\n`;\r\n\r\nconst Title = styled.h3`\r\n  font-size: 32px;\r\n`;\r\n\r\nconst ItemContainer = styled.div`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst Item = styled.span``;\r\n\r\nconst Divider = styled.span`\r\n  margin: 0 10px;\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  font-size: 12px;\r\n  opacity: 0.8;\r\n  line-height: 1.5;\r\n  width: 70%;\r\n`;\r\n\r\nconst DetailPresenter = ({ result, error, loading }) =>\r\n  loading ? (\r\n    <>\r\n      <Helmet>\r\n        <title>Loading | Nomflix</title>\r\n      </Helmet>\r\n      <Loader />\r\n    </>\r\n  ) : (\r\n    <Container>\r\n      <Helmet>\r\n        <title>\r\n          {result.original_title ? result.original_title : result.original_name}{\" \"}\r\n          | Nomflix\r\n        </title>\r\n      </Helmet>\r\n      <Backdrop\r\n        bgImage={`https://image.tmdb.org/t/p/w300${result.backdrop_path}`}\r\n      />\r\n      <Content>\r\n        <Cover\r\n          bgImage={\r\n            result.poster_path\r\n              ? `https://image.tmdb.org/t/p/w300${result.poster_path}`\r\n              : require(\"../../assets/noPosterSmall.png\").default\r\n          }\r\n        />\r\n        <Data>\r\n          <Title>\r\n            {result.original_title\r\n              ? result.original_title\r\n              : result.original_name}{\" \"}\r\n          </Title>\r\n          <ItemContainer>\r\n            <Item>\r\n              {result.release_date\r\n                ? result.release_date?.substring(0, 4)\r\n                : result.first_air_date?.substring(0, 4)}\r\n            </Item>\r\n            <Divider>·</Divider>\r\n            <Item>\r\n              {result.runtime ? result.runtime : result.episode_run_time[0]} min\r\n            </Item>\r\n            <Divider>·</Divider>\r\n            <Item>\r\n              {result.genres &&\r\n                result.genres.map((genre, index) =>\r\n                  index === result.genres.length - 1\r\n                    ? genre.name\r\n                    : `${genre.name} / `\r\n                )}\r\n            </Item>\r\n            <Divider>·</Divider>\r\n            <Item>{result.vote_average && `⭐ ${result.vote_average}/10`}</Item>\r\n          </ItemContainer>\r\n          <Overview>{result.overview}</Overview>\r\n        </Data>\r\n      </Content>\r\n    </Container>\r\n  );\r\n\r\nDetailPresenter.propTypes = {\r\n  result: PropTypes.object,\r\n  error: PropTypes.string,\r\n  loading: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default DetailPresenter;\r\n\r\n// 숙제\r\n// IMDB LINK에 관한것\r\n// movie/tv안에 탭추가 (유튜브, 제작회사, 국가)\r\n// 콜렉션 링크\r\n// 콜렉션 경로\r\n// on TV ,쇼 시즌들\r\n","import DetailContainer from \"./DetailContainer\";\r\n\r\nexport default DetailContainer;\r\n","import { moviesApi, tvApi } from \"api\";\r\nimport React from \"react\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\n\r\nclass DetailContainer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const {\r\n      location: { pathname },\r\n    } = props;\r\n\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\"), // 경로에 \"/movie/\"가 있는지 판단\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      }, // show/:id 나 movie/:id의 :id값을 가져옴\r\n      history: { push },\r\n    } = this.props; // Route를 통해 왔으므로 prop가 자동 할당\r\n\r\n    const { isMovie } = this.state;\r\n    const parsedId = parseInt(id); // 문자열을 정수화\r\n\r\n    if (isNaN(parsedId)) {\r\n      return push(\"/\"); // history안의 push 함수(f표시는 함수의미)를 이용하여 이동, return이용하여 componentDidMount종료\r\n    }\r\n    let result = null;\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await moviesApi.movieDetail(parsedId)); // let result에 ES6방식으로 데이터를 저장하기 위해서 전체 괄호를 친다\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parsedId));\r\n      }\r\n    } catch {\r\n      this.setState({ error: \"Can't find anything.\" });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n\r\nexport default DetailContainer;\r\n","import React from \"react\";\r\nimport { HashRouter, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Header from \"Components/Header\";\r\nimport Home from \"Routes/Home/index\";\r\nimport TV from \"Routes/TV/index\";\r\nimport Search from \"Routes/Search/index\";\r\nimport Detail from \"Routes/Detail/index\";\r\n\r\nfunction Router() {\r\n  return (\r\n    <HashRouter>\r\n      <Header />\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" exact component={TV} />\r\n        <Route path=\"/search\" component={Search} />\r\n        <Route path=\"/movie/:id\" component={Detail} />\r\n        <Route path=\"/show/:id\" component={Detail} />\r\n        <Redirect from=\"*\" to=\"/\" />\r\n        {/* url경로를 아무거나 입력시 /로 이동시킨다 */}\r\n      </Switch>\r\n      {/* Route를 통해 경로 이동시 위에서 아래로 하나씩 훑어보고 일치할 때마다 이동한다. Switch는 단 한번만 이동하게 한다 */}\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default Router;\r\n","import React from \"react\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport Router from \"./Router\";\n\nfunction App() {\n  return (\n    <>\n      <Router />\n      <GlobalStyles />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"Components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}